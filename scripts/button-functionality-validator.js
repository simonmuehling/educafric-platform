#!/usr/bin/env node

/**
 * EDUCAFRIC Button Functionality Validator
 * 
 * Ce script v√©rifie automatiquement que tous les boutons et √©l√©ments cliquables
 * dans l'application ont des fonctionnalit√©s r√©elles et ne sont pas des placeholders.
 * 
 * Usage: node scripts/button-functionality-validator.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ButtonFunctionalityValidator {
  constructor() {
    this.issues = [];
    this.checkedFiles = 0;
    this.totalButtons = 0;
    this.functionalButtons = 0;
    this.problematicPatterns = [
      // Patterns qui indiquent des boutons non-fonctionnels
      /onClick=\{\(\) => alert\(/gi,
      /onClick=\{\(\) => console\.log\(/gi,
      /onClick=\{\(\) => toast\(\{[^}]*coming soon/gi,
      /onClick=\{\(\) => toast\(\{[^}]*not implemented/gi,
      /onClick=\{\(\) => \{\s*\/\/ TODO/gi,
      /onClick=\{\(\) => \{\s*\/\/ PLACEHOLDER/gi,
      /onClick=\{undefined\}/gi,
      /onClick=\{\}/gi,
      /href="#"/gi,
      /href="javascript:void\(0\)"/gi,
    ];

    this.functionalPatterns = [
      // Patterns qui indiquent des boutons fonctionnels
      /onClick=\{[^}]*navigate/gi,
      /onClick=\{[^}]*router/gi,
      /onClick=\{[^}]*mutation/gi,
      /onClick=\{[^}]*apiRequest/gi,
      /onClick=\{[^}]*fetch/gi,
      /onClick=\{[^}]*window\.open/gi,
      /onClick=\{[^}]*dispatchEvent/gi,
      /onClick=\{[^}]*CustomEvent/gi,
      /onClick=\{[^}]*handleSubmit/gi,
      /onClick=\{[^}]*handle[A-Z]/gi,
    ];
  }

  async validateProject() {
    console.log('üîç [BUTTON_VALIDATOR] D√©marrage de la validation des boutons...\n');

    const clientDir = path.join(process.cwd(), 'client/src');
    await this.scanDirectory(clientDir);

    this.generateReport();
    return this.issues.length === 0;
  }

  async scanDirectory(dirPath) {
    if (!fs.existsSync(dirPath)) {
      console.log(`‚ùå R√©pertoire non trouv√©: ${dirPath}`);
      return;
    }

    const entries = fs.readdirSync(dirPath, { withFileTypes: true });

    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);

      if (entry.isDirectory()) {
        // Ignorer certains dossiers
        if (!['node_modules', '.git', 'dist', 'build'].includes(entry.name)) {
          await this.scanDirectory(fullPath);
        }
      } else if (entry.isFile() && this.isReactFile(entry.name)) {
        await this.validateFile(fullPath);
      }
    }
  }

  isReactFile(filename) {
    return /\.(tsx|jsx|ts|js)$/.test(filename) && 
           !filename.includes('.test.') && 
           !filename.includes('.spec.');
  }

  async validateFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      this.checkedFiles++;
      
      const relativePath = path.relative(process.cwd(), filePath);
      console.log(`üìÅ Analyse: ${relativePath}`);

      await this.analyzeButtonsInFile(content, relativePath);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la lecture de ${filePath}:`, error.message);
    }
  }

  async analyzeButtonsInFile(content, filePath) {
    // D√©tecter tous les boutons et √©l√©ments cliquables
    const buttonPatterns = [
      /<Button[^>]*onClick=/gi,
      /<button[^>]*onClick=/gi,
      /<[^>]*onClick=/gi,
      /<Link[^>]*to=/gi,
      /<a[^>]*href=/gi,
    ];

    let fileButtons = 0;
    let fileFunctionalButtons = 0;
    let fileIssues = [];

    for (const pattern of buttonPatterns) {
      const matches = content.match(pattern) || [];
      fileButtons += matches.length;

      for (const match of matches) {
        this.totalButtons++;
        
        // Extraire la section compl√®te du bouton
        const buttonSection = this.extractButtonSection(content, match);
        
        if (this.isButtonFunctional(buttonSection)) {
          this.functionalButtons++;
          fileFunctionalButtons++;
        } else {
          const issue = this.identifyIssue(buttonSection, filePath);
          if (issue) {
            fileIssues.push(issue);
            this.issues.push(issue);
          }
        }
      }
    }

    if (fileIssues.length > 0) {
      console.log(`  ‚ö†Ô∏è  ${fileIssues.length} probl√®me(s) d√©tect√©(s)`);
      fileIssues.forEach(issue => {
        console.log(`     - ${issue.type}: ${issue.description}`);
      });
    } else if (fileButtons > 0) {
      console.log(`  ‚úÖ ${fileFunctionalButtons}/${fileButtons} boutons fonctionnels`);
    }
  }

  extractButtonSection(content, match) {
    const startIndex = content.indexOf(match);
    const endIndex = content.indexOf('>', startIndex) + 1;
    
    // Essayer d'extraire un contexte plus large
    const contextStart = Math.max(0, startIndex - 200);
    const contextEnd = Math.min(content.length, endIndex + 200);
    
    return content.substring(contextStart, contextEnd);
  }

  isButtonFunctional(buttonSection) {
    // V√©rifier les patterns probl√©matiques
    for (const pattern of this.problematicPatterns) {
      if (pattern.test(buttonSection)) {
        return false;
      }
    }

    // V√©rifier les patterns fonctionnels
    for (const pattern of this.functionalPatterns) {
      if (pattern.test(buttonSection)) {
        return true;
      }
    }

    // V√©rifications additionnelles
    if (buttonSection.includes('data-testid=')) {
      return true; // Les boutons avec testid sont g√©n√©ralement fonctionnels
    }

    if (buttonSection.includes('disabled') && !buttonSection.includes('onClick')) {
      return false; // Bouton d√©sactiv√© sans fonction
    }

    // Par d√©faut, consid√©rer comme potentiellement probl√©matique
    return buttonSection.includes('onClick=') || buttonSection.includes('href=');
  }

  identifyIssue(buttonSection, filePath) {
    let issueType = 'UNKNOWN';
    let description = '';

    if (buttonSection.includes('alert(')) {
      issueType = 'ALERT_PLACEHOLDER';
      description = 'Utilise alert() au lieu de fonctionnalit√© r√©elle';
    } else if (buttonSection.includes('console.log')) {
      issueType = 'CONSOLE_LOG';
      description = 'Utilise console.log au lieu de fonctionnalit√© r√©elle';
    } else if (buttonSection.includes('coming soon')) {
      issueType = 'COMING_SOON';
      description = 'Bouton marqu√© comme "coming soon"';
    } else if (buttonSection.includes('TODO')) {
      issueType = 'TODO_PLACEHOLDER';
      description = 'Bouton avec commentaire TODO';
    } else if (buttonSection.includes('href="#"')) {
      issueType = 'EMPTY_HREF';
      description = 'Lien avec href="#" sans fonctionnalit√©';
    } else if (!buttonSection.includes('onClick') && !buttonSection.includes('href')) {
      issueType = 'NO_FUNCTION';
      description = 'Bouton sans onClick ni href';
    }

    if (issueType !== 'UNKNOWN') {
      return {
        file: filePath,
        type: issueType,
        description: description,
        context: buttonSection.substring(0, 100) + '...'
      };
    }

    return null;
  }

  generateReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RAPPORT DE VALIDATION DES BOUTONS');
    console.log('='.repeat(60));
    
    console.log(`üìÅ Fichiers analys√©s: ${this.checkedFiles}`);
    console.log(`üîò Total boutons trouv√©s: ${this.totalButtons}`);
    console.log(`‚úÖ Boutons fonctionnels: ${this.functionalButtons}`);
    console.log(`‚ùå Boutons probl√©matiques: ${this.issues.length}`);
    
    const successRate = this.totalButtons > 0 
      ? ((this.functionalButtons / this.totalButtons) * 100).toFixed(1)
      : 0;
    console.log(`üìà Taux de r√©ussite: ${successRate}%`);

    if (this.issues.length > 0) {
      console.log('\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:');
      console.log('-'.repeat(40));
      
      const issuesByType = {};
      this.issues.forEach(issue => {
        if (!issuesByType[issue.type]) {
          issuesByType[issue.type] = [];
        }
        issuesByType[issue.type].push(issue);
      });

      Object.keys(issuesByType).forEach(type => {
        console.log(`\nüî∏ ${type} (${issuesByType[type].length} occurrences):`);
        issuesByType[type].forEach(issue => {
          console.log(`  üìÑ ${issue.file}`);
          console.log(`     ${issue.description}`);
          console.log(`     Contexte: ${issue.context}`);
        });
      });

      console.log('\nüîß RECOMMANDATIONS:');
      console.log('- Remplacez les alert() par de vraies fonctionnalit√©s');
      console.log('- Impl√©mentez les fonctions onClick manquantes');
      console.log('- Utilisez des navigation handlers au lieu de href="#"');
      console.log('- Compl√©tez les TODO et placeholders');
    } else {
      console.log('\nüéâ PARFAIT! Tous les boutons semblent fonctionnels!');
    }

    // Sauvegarder le rapport
    this.saveReport();
  }

  saveReport() {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        filesChecked: this.checkedFiles,
        totalButtons: this.totalButtons,
        functionalButtons: this.functionalButtons,
        issues: this.issues.length,
        successRate: this.totalButtons > 0 
          ? ((this.functionalButtons / this.totalButtons) * 100).toFixed(1)
          : 0
      },
      issues: this.issues
    };

    const reportPath = path.join(process.cwd(), 'button-functionality-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
  }
}

// Auto-validation pour d√©veloppement
class AutoValidator {
  constructor() {
    this.validator = new ButtonFunctionalityValidator();
    this.watchMode = process.argv.includes('--watch');
  }

  async start() {
    console.log('üöÄ [AUTO_VALIDATOR] D√©marrage de la validation automatique...\n');
    
    // Validation initiale
    await this.runValidation();

    if (this.watchMode) {
      console.log('üëÄ Mode surveillance activ√© - Validation √† chaque modification...');
      this.setupFileWatcher();
    }
  }

  async runValidation() {
    const startTime = Date.now();
    const success = await this.validator.validateProject();
    const duration = Date.now() - startTime;

    console.log(`\n‚è±Ô∏è  Validation termin√©e en ${duration}ms`);
    
    if (!success) {
      console.log('‚ùå Probl√®mes d√©tect√©s - Correction n√©cessaire');
      process.exit(1);
    } else {
      console.log('‚úÖ Tous les boutons sont fonctionnels!');
    }
  }

  async setupFileWatcher() {
    const { default: chokidar } = await import('chokidar');
    
    const watcher = chokidar.watch('client/src/**/*.{tsx,jsx,ts,js}', {
      ignored: /node_modules/,
      persistent: true
    });

    let timeout;
    watcher.on('change', (filePath) => {
      console.log(`üìù Fichier modifi√©: ${filePath}`);
      
      // Debounce pour √©viter trop de validations
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        this.runValidation();
      }, 2000);
    });
  }
}

// Script principal
if (import.meta.url === `file://${process.argv[1]}`) {
  const autoValidator = new AutoValidator();
  autoValidator.start().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

export { ButtonFunctionalityValidator, AutoValidator };