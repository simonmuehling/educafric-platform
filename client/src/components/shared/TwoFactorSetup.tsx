import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { QrCode, Shield, Smartphone, Check, X } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import { InputOTP, InputOTPGroup, InputOTPSlot } from '@/components/ui/input-otp';
import { apiRequest } from '@/lib/queryClient';

interface TwoFactorSetupProps {
  isEnabled: boolean;
  onToggle: (enabled: boolean) => void;
}

export const TwoFactorSetup: React.FC<TwoFactorSetupProps> = ({ isEnabled, onToggle }) => {
  const { t } = useLanguage();
  const [step, setStep] = useState<'setup' | 'verify' | 'disable'>('setup');
  const [qrCode, setQrCode] = useState<string>('');
  const [secret, setSecret] = useState<string>('');
  const [verificationCode, setVerificationCode] = useState('');
  const [disablePassword, setDisablePassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');

  const translations = {
    fr: {
      twoFactorAuth: "Authentification à deux facteurs",
      enable2FA: "Activer la 2FA",
      disable2FA: "Désactiver la 2FA",
      step1Title: "Étape 1: Scanner le code QR",
      step1Desc: "Utilisez Google Authenticator, Authy ou une autre app d'authentification pour scanner ce code QR:",
      step2Title: "Étape 2: Entrer le code de vérification",
      step2Desc: "Entrez le code à 6 chiffres généré par votre app d'authentification:",
      manualEntry: "Saisie manuelle",
      manualEntryDesc: "Si vous ne pouvez pas scanner le QR, entrez cette clé manuellement:",
      verificationCode: "Code de vérification",
      confirm: "Confirmer",
      cancel: "Annuler",
      disableTitle: "Désactiver la 2FA",
      disableDesc: "Pour désactiver l'authentification à deux facteurs, entrez votre mot de passe:",
      password: "Mot de passe",
      status: "Statut",
      enabled: "Activée",
      disabled: "Désactivée",
      setupGuide: "Guide de configuration",
      downloadApp: "1. Téléchargez Google Authenticator ou Authy",
      scanQR: "2. Scannez le code QR ci-dessous",
      enterCode: "3. Entrez le code généré pour confirmer"
    },
    en: {
      twoFactorAuth: "Two-Factor Authentication",
      enable2FA: "Enable 2FA",
      disable2FA: "Disable 2FA",
      step1Title: "Step 1: Scan QR Code",
      step1Desc: "Use Google Authenticator, Authy, or another authenticator app to scan this QR code:",
      step2Title: "Step 2: Enter verification code",
      step2Desc: "Enter the 6-digit code generated by your authenticator app:",
      manualEntry: "Manual entry",
      manualEntryDesc: "If you cannot scan the QR code, enter this key manually:",
      verificationCode: "Verification code",
      confirm: "Confirm",
      cancel: "Cancel",
      disableTitle: "Disable 2FA",
      disableDesc: "To disable two-factor authentication, enter your password:",
      password: "Password",
      status: "Status",
      enabled: "Enabled",
      disabled: "Disabled",
      setupGuide: "Setup Guide",
      downloadApp: "1. Download Google Authenticator or Authy",
      scanQR: "2. Scan the QR code below",
      enterCode: "3. Enter the generated code to confirm"
    }
  };

  const { language } = useLanguage();
  const currentTranslations = translations[language as keyof typeof translations] || translations.fr;

  const setupTwoFactor = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await apiRequest('/api/2fa/setup', 'POST') as any;
      setQrCode(response.qrCode);
      setSecret(response.secret);
      setStep('verify');
    } catch (err: any) {
      setError(err.message || 'Failed to setup 2FA');
    } finally {
      setLoading(false);
    }
  };

  const verifyTwoFactor = async () => {
    if ((Array.isArray(verificationCode) ? verificationCode.length : 0) !== 6) {
      setError('Please enter a 6-digit code');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await apiRequest('/api/2fa/verify', 'POST', {
        token: verificationCode
      }) as any;
      setSuccess(response.message);
      onToggle(true);
      setStep('setup');
      setVerificationCode('');
      setQrCode('');
      setSecret('');
    } catch (err: any) {
      setError(err.message || 'Invalid verification code');
    } finally {
      setLoading(false);
    }
  };

  const disableTwoFactor = async () => {
    if (!disablePassword) {
      setError('Password is required');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await apiRequest('/api/2fa/disable', 'POST', {
        password: disablePassword
      }) as any;
      setSuccess(response.message);
      onToggle(false);
      setStep('setup');
      setDisablePassword('');
    } catch (err: any) {
      setError(err.message || 'Failed to disable 2FA');
    } finally {
      setLoading(false);
    }
  };

  if (step === 'disable') {
    return (
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Shield className="w-5 h-5 text-red-500" />
            {currentTranslations.disableTitle}
          </h3>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-gray-600">{currentTranslations.disableDesc}</p>
          
          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
              {error}
            </div>
          )}

          <div>
            <Label htmlFor="disablePassword">{currentTranslations.password}</Label>
            <Input
              id="disablePassword"
              type="password"
              value={disablePassword}
              onChange={(e) => setDisablePassword(e?.target?.value)}
              placeholder="••••••••"
            />
          </div>

          <div className="flex gap-2">
            <Button 
              onClick={disableTwoFactor}
              disabled={loading}
              variant="destructive"
              className="flex-1"
            >
              {loading ? 'Processing...' : currentTranslations.disable2FA}
            </Button>
            <Button 
              onClick={() => setStep('setup')}
              variant="outline"
              className="flex-1"
            >
              {currentTranslations.cancel}
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (step === 'verify') {
    return (
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Smartphone className="w-5 h-5 text-blue-500" />
            {currentTranslations.step2Title}
          </h3>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-gray-600">{currentTranslations.step2Desc}</p>
          
          {error && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
              {error}
            </div>
          )}

          <div className="flex justify-center">
            <InputOTP value={verificationCode} onChange={setVerificationCode} maxLength={6}>
              <InputOTPGroup>
                <InputOTPSlot index={0} />
                <InputOTPSlot index={1} />
                <InputOTPSlot index={2} />
                <InputOTPSlot index={3} />
                <InputOTPSlot index={4} />
                <InputOTPSlot index={5} />
              </InputOTPGroup>
            </InputOTP>
          </div>

          <div className="flex gap-2">
            <Button 
              onClick={verifyTwoFactor}
              disabled={loading || (Array.isArray(verificationCode) ? verificationCode.length : 0) !== 6}
              className="flex-1"
            >
              {loading ? 'Verifying...' : currentTranslations.confirm}
            </Button>
            <Button 
              onClick={() => setStep('setup')}
              variant="outline"
              className="flex-1"
            >
              {currentTranslations.cancel}
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Shield className={`w-5 h-5 ${isEnabled ? 'text-green-500' : 'text-gray-400'}`} />
          {currentTranslations.twoFactorAuth}
        </h3>
        <div className="flex items-center gap-2 text-sm">
          <span>{currentTranslations.status}:</span>
          <span className={`flex items-center gap-1 ${isEnabled ? 'text-green-600' : 'text-gray-500'}`}>
            {isEnabled ? <Check className="w-4 h-4" /> : <X className="w-4 h-4" />}
            {isEnabled ? currentTranslations.enabled : currentTranslations.disabled}
          </span>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {success && (
          <div className="p-3 bg-green-50 border border-green-200 rounded-md text-green-600 text-sm">
            {success}
          </div>
        )}

        {!isEnabled ? (
          <div className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-md">
              <h4 className="font-medium text-blue-900 mb-2">{currentTranslations.setupGuide}</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>{currentTranslations.downloadApp}</li>
                <li>{currentTranslations.scanQR}</li>
                <li>{currentTranslations.enterCode}</li>
              </ul>
            </div>

            {qrCode && (
              <div className="space-y-4">
                <div className="text-center">
                  <h4 className="font-medium mb-2">{currentTranslations.step1Title}</h4>
                  <p className="text-sm text-gray-600 mb-4">{currentTranslations.step1Desc}</p>
                  <div className="inline-block p-4 bg-white border rounded-lg">
                    <img src={qrCode} alt="QR Code" className="w-48 h-48" />
                  </div>
                </div>

                <div className="bg-gray-50 p-4 rounded-md">
                  <h4 className="font-medium mb-2">{currentTranslations.manualEntry}</h4>
                  <p className="text-sm text-gray-600 mb-2">{currentTranslations.manualEntryDesc}</p>
                  <div className="font-mono text-sm bg-white p-2 border rounded break-all">
                    {secret}
                  </div>
                </div>
              </div>
            )}

            <Button 
              onClick={qrCode ? () => setStep('verify') : setupTwoFactor}
              disabled={loading}
              className="w-full"
            >
              {loading ? 'Setting up...' : qrCode ? currentTranslations.step2Title : currentTranslations.enable2FA}
            </Button>
          </div>
        ) : (
          <div className="text-center space-y-4">
            <div className="text-green-600">
              <Check className="w-12 h-12 mx-auto mb-2" />
              <p className="font-medium">Two-factor authentication is enabled</p>
              <p className="text-sm text-gray-600">Your account is protected with 2FA</p>
            </div>
            <Button 
              onClick={() => setStep('disable')}
              variant="outline"
              className="mt-4"
            >
              {currentTranslations.disable2FA}
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default TwoFactorSetup;